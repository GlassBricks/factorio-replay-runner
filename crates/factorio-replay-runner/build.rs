use std::env;
use std::fs;
use std::path::Path;
use std::process::Command;

fn try_cmd(cmd: &mut Command, err_msg: &str) {
    if let Err(e) = cmd.status() {
        panic!("{}: {}", err_msg, e);
    }
}

fn main() {
    let out_dir = env::var("OUT_DIR").expect("OUT_DIR environment variable not set");
    let replay_script_dir = "replay-script";

    println!("cargo:rerun-if-changed={replay_script_dir}/control.ts");
    println!("cargo:rerun-if-changed={replay_script_dir}/event_handler.d.ts");
    println!("cargo:rerun-if-changed={replay_script_dir}/package.json");
    println!("cargo:rerun-if-changed={replay_script_dir}/tsconfig.json");

    try_cmd(
        Command::new("bun").arg("--version"),
        "bun is not available in PATH. Please ensure you're running in a nix development shell with bun installed.",
    );
    try_cmd(
        Command::new("bun")
            .arg("install")
            .current_dir(&replay_script_dir),
        "Failed to execute bun install",
    );

    try_cmd(
        Command::new("bun")
            .arg("run")
            .arg("build")
            .current_dir(&replay_script_dir),
        "TypeScript to Lua compilation failed. Check TypeScript source files for errors.",
    );

    let control_lua_path = Path::new(&replay_script_dir).join("control.lua");
    let control_lua_content = fs::read_to_string(&control_lua_path).unwrap_or_else(|err| {
        panic!(
            "Failed to read generated control.lua from {}: {}",
            control_lua_path.display(),
            err
        );
    });

    let delimiter = get_delimiter(&control_lua_content);
    let generated_rs_content = format!(
        "// This file is automatically generated by build.rs\n\
            // Do not edit manually - changes will be overwritten\n\
            \n\
            pub const REPLAY_SCRIPT_CONTROL_LUA: &str = r{delimiter}\"{content}\"{delimiter};\n",
        delimiter = delimiter,
        content = control_lua_content
    );

    // Write the generated Rust file to OUT_DIR
    let output_path = Path::new(&out_dir).join("lua_scripts.rs");
    fs::write(&output_path, generated_rs_content).unwrap_or_else(|err| {
        panic!(
            "Failed to write generated Rust file to {}: {}",
            output_path.display(),
            err
        );
    });
}

fn get_delimiter(content: &str) -> String {
    let mut delimiter_count = 0;
    loop {
        let delimiter = "#".repeat(delimiter_count);
        let raw_string_end = format!("\"{delimiter}");

        if !content.contains(&raw_string_end) {
            break delimiter;
        }
        delimiter_count += 1;

        // Safety check to prevent infinite loop
        if delimiter_count > 10 {
            panic!("Could not find suitable raw string delimiter for Lua content");
        }
    }
}
