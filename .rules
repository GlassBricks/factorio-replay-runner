This is a rust project broken into multiple crates.

## Crates

### replay-script crate
This crate contains a tstl (TypescriptToLua) subproject in tstl_src/.
tstl will compile Typescript to lua files, which are the actual scripts installed in Factorio replay files.
The lua files are included into rust with include_str!, automatically added by a build.rs script.
tstl is run with bun.sh, which itself is managed by build.rs.

The main api is replay_script::ReplayScripts, which is just a struct with a bunch of booleans for every script.
On ::to_string(), it assembles the script based on which ones are enabled.

This contains "ReplayLog" and "LogMessage", with parsing logic; for messages generated by the replay script.

### replay-runner
Handles factorio installation management, replay file installation management, and replay execution.

### cli
Simple cli to run things for manual testing.

### run-downloader
Finds zip file links, and safely downloads them.

## Rust
Use idiomatic Rust.
This project does not use unsafe.
Prefer functional style programming/chaining. For instance, prefer:
- use iter() and iterator methods over for loops
- map_err(), ok_or_else(), bool::then(), etc. for Option and Result, over _simple_ if/match statements.

Never deeply nest functions, either:
- break them up into smaller, single-purpose functions
- Invert if-statements and control flow to avoid nesting

Omit code comments. Instead, opt for self-documenting code.

All crate dependencies should eventually be workspace dependencies.

## Editing
Do not add extra documentation, sample usages, sample data, README.md files, or any other such.
Use `cargo` commands instead of manually editing Cargo.toml when possible, to get the latest version of crates.
